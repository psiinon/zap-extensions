graphql.api.action.importFile = ファイルからGraphQLスキーマをインポートします。
graphql.api.action.importFile.param.endurl = エンドポイントURL
graphql.api.action.importFile.param.file = GraphQLスキーマを含むファイル
graphql.api.action.importUrl = URLからGraphQLスキーマをインポートします。
graphql.api.action.importUrl.param.endurl = エンドポイントURL
graphql.api.action.importUrl.param.url = GraphQLスキーマの取得先URL
graphql.api.action.setOptionArgsType = 引数の指定方法を設定します。
graphql.api.action.setOptionArgsType.param.String = "INLINE"、"VARIABLES"、または"BOTH"を指定できます。
graphql.api.action.setOptionLenientMaxQueryDepthEnabled = 最大クエリ深度を寛容に適用するかどうかを設定します。
graphql.api.action.setOptionLenientMaxQueryDepthEnabled.param.Boolean = 寛容に適用する (true または false)。
graphql.api.action.setOptionMaxAdditionalQueryDepth = 最大追加クエリ生成深度を設定します (寛容適用時に使用)。
graphql.api.action.setOptionMaxAdditionalQueryDepth.param.Integer = 最大追加深度
graphql.api.action.setOptionMaxArgsDepth = 最大引数生成深度を設定します。
graphql.api.action.setOptionMaxArgsDepth.param.Integer = 最大深度
graphql.api.action.setOptionMaxQueryDepth = 最大クエリ生成深度を設定します。
graphql.api.action.setOptionMaxQueryDepth.param.Integer = 最大深度
graphql.api.action.setOptionOptionalArgsEnabled = オプション引数を指定するかどうかを設定します。
graphql.api.action.setOptionOptionalArgsEnabled.param.Boolean = オプション引数を指定する (true または false)。
graphql.api.action.setOptionQueryGenEnabled = クエリジェネレーターを有効にするかどうかを設定します。
graphql.api.action.setOptionQueryGenEnabled.param.Boolean = クエリ生成を有効にする (true または false)。
graphql.api.action.setOptionQuerySplitType = 単一クエリを生成するレベルを設定します。
graphql.api.action.setOptionQuerySplitType.param.String = "LEAF"、"ROOT_FIELD"、または "OPERATION" を指定できます。
graphql.api.action.setOptionRequestMethod = リクエストメソッドを設定します。
graphql.api.action.setOptionRequestMethod.param.String = "POST_JSON"、"POST_GRAPHQL"、または "GET" を指定できます。
graphql.api.view.optionArgsType = 現在の引数指定方法を返します。
graphql.api.view.optionLenientMaxQueryDepthEnabled = 寛容な最大クエリ生成深度が有効かどうかを返します。
graphql.api.view.optionMaxAdditionalQueryDepth = 現在の最大追加クエリ生成深度を返します。
graphql.api.view.optionMaxArgsDepth = 現在の最大引数生成深度を返します。
graphql.api.view.optionMaxQueryDepth = 現在の最大クエリ生成深度を返します。
graphql.api.view.optionOptionalArgsEnabled = オプション引数が現在指定されているかどうかを返します。
graphql.api.view.optionQueryGenEnabled = クエリジェネレーターが有効かどうかを返します。
graphql.api.view.optionQuerySplitType = 単一クエリを生成する現在のレベルを返します。
graphql.api.view.optionRequestMethod = 現在のリクエストメソッドを返します。

graphql.automation.desc = GraphQL 自動化フレームワーク統合
graphql.automation.dialog.argstype = 引数タイプ\:
graphql.automation.dialog.endpoint = エンドポイント\:
graphql.automation.dialog.lenientmaxquery = 寛容な最大クエリ深度有効\:
graphql.automation.dialog.maxaddquerydepth = 最大追加クエリ階層\:
graphql.automation.dialog.maxargsdepth = 最大引数階層\:
graphql.automation.dialog.maxquerydepth = 最大クエリ階層\:
graphql.automation.dialog.name = ジョブ名\:
graphql.automation.dialog.optargsenabled = オプション引数有効\:
graphql.automation.dialog.querygen = クエリジェネレーターを有効化\:
graphql.automation.dialog.querysplittype = クエリ分割タイプ\:
graphql.automation.dialog.requestmethod = リクエストメソッド\:
graphql.automation.dialog.schemafile = スキーマファイル\:
graphql.automation.dialog.schemaurl = スキーマURL\:
graphql.automation.dialog.summary = URL\: {0}, ファイル\: {1}
graphql.automation.dialog.tab.params = パラメーター
graphql.automation.dialog.tab.queryGenConfig = クエリジェネレーター設定
graphql.automation.dialog.title = GraphQLジョブ
graphql.automation.error = GraphQLジョブエラー\: {0}
graphql.automation.info.import.file = GraphQLジョブ - ファイルからスキーマをインポート中\: {0} 対象\: {1}
graphql.automation.info.import.introspect = GraphQLジョブ - イントロスペクションを使用してスキーマをインポート中\: {0}
graphql.automation.info.import.url = GraphQLジョブ - URLからスキーマをインポート中\: {0} 対象\: {1}
graphql.automation.name = GraphQL自動化

graphql.cmdline.endurl.help = エンドポイントURLを設定
graphql.cmdline.file.help = ファイルからGraphQLスキーマをインポート
graphql.cmdline.url.help = URLからGraphQLスキーマをインポート

graphql.desc = GraphQLエンドポイントの検査と攻撃を可能にします。

graphql.engine.absinthe.docsUrl = https\://github.com/absinthe-graphql/absinthe
graphql.engine.absinthe.name = Absinthe
graphql.engine.absinthe.technologies = Elixir

graphql.engine.agoo.docsUrl = https\://github.com/ohler55/agoo
graphql.engine.agoo.name = Agoo
graphql.engine.agoo.technologies = Ruby

graphql.engine.apollo.docsUrl = https\://github.com/apollographql/apollo-server
graphql.engine.apollo.name = Apollo
graphql.engine.apollo.technologies = JavaScript, Node.js, および TypeScript

graphql.engine.ariadne.docsUrl = https\://github.com/mirumee/ariadne
graphql.engine.ariadne.name = Ariadne
graphql.engine.ariadne.technologies = Python

graphql.engine.aws-appsync.docsUrl = https\://aws.amazon.com/appsync
graphql.engine.aws-appsync.name = AWS AppSync
graphql.engine.aws-appsync.technologies = AWS

graphql.engine.caliban.docsUrl = https\://github.com/ghostdogpr/caliban
graphql.engine.caliban.name = caliban
graphql.engine.caliban.technologies = Scala

graphql.engine.dgraph.docsUrl = https\://github.com/dgraph-io/dgraph
graphql.engine.dgraph.name = Dgraph
graphql.engine.dgraph.technologies = JavaScript

graphql.engine.dianajl.docsUrl = https\://github.com/neomatrixcode/Diana.jl
graphql.engine.dianajl.name = Diana.jl
graphql.engine.dianajl.technologies = Julia

graphql.engine.directus.docsUrl = https\://github.com/directus/directus
graphql.engine.directus.name = Directus
graphql.engine.directus.technologies = TypeScript

graphql.engine.example.docsUrl = https\://example.com/graphql-engine-reference
graphql.engine.example.name = GraphQL エンジン例
graphql.engine.example.technologies = "Example Technology 1" and "Example Technology 2"

graphql.engine.gqlgen.docsUrl = https\://github.com/99designs/gqlgen
graphql.engine.gqlgen.name = gqlgen
graphql.engine.gqlgen.technologies = Golang

graphql.engine.graphene.docsUrl = https\://github.com/graphql-python/graphene
graphql.engine.graphene.name = Graphene
graphql.engine.graphene.technologies = Python

graphql.engine.graphql-by-pop.docsUrl = https\://github.com/leoloso/PoP/tree/master/layers/GraphQLByPoP
graphql.engine.graphql-by-pop.name = GraphQL by PoP
graphql.engine.graphql-by-pop.technologies = PHP

graphql.engine.graphql-dotnet.docsUrl = https\://github.com/graphql-dotnet/graphql-dotnet
graphql.engine.graphql-dotnet.name = GraphQL.NET
graphql.engine.graphql-dotnet.technologies = .NET

graphql.engine.graphql-flutter.docsUrl = https\://github.com/zino-app/graphql-flutter
graphql.engine.graphql-flutter.name = graphql-flutter
graphql.engine.graphql-flutter.technologies = Flutter (Dart)

graphql.engine.graphql-go.docsUrl = https\://github.com/graphql-go/graphql
graphql.engine.graphql-go.name = graphql-go
graphql.engine.graphql-go.technologies = Golang

graphql.engine.graphql-java.docsUrl = https\://github.com/graphql-java/graphql-java
graphql.engine.graphql-java.name = graphql-java
graphql.engine.graphql-java.technologies = Java

graphql.engine.graphql-php.docsUrl = https\://github.com/webonyx/graphql-php
graphql.engine.graphql-php.name = graphql-php
graphql.engine.graphql-php.technologies = PHP

graphql.engine.graphql-ruby.docsUrl = https\://github.com/rmosolgo/graphql-ruby
graphql.engine.graphql-ruby.name = graphql-ruby
graphql.engine.graphql-ruby.technologies = Ruby

graphql.engine.graphql-yoga.docsUrl = https\://github.com/dotansimha/graphql-yoga
graphql.engine.graphql-yoga.name = GraphQL Yoga
graphql.engine.graphql-yoga.technologies = TypeScript

graphql.engine.hasura.docsUrl = https\://github.com/hasura/graphql-engine
graphql.engine.hasura.name = Hasura
graphql.engine.hasura.technologies = Haskell

graphql.engine.hotchocolate.docsUrl = https\://chillicream.com/docs/hotchocolate/v13
graphql.engine.hotchocolate.name = Hot Chocolate
graphql.engine.hotchocolate.technologies = .NET

graphql.engine.hypergraphql.docsUrl = https\://github.com/hypergraphql/hypergraphql
graphql.engine.hypergraphql.name = HyperGraphQL
graphql.engine.hypergraphql.technologies = Java

graphql.engine.inigo.docsUrl = https\://inigo.io
graphql.engine.inigo.name = Inigo
graphql.engine.inigo.technologies = 開始

graphql.engine.jaal.docsUrl = https\://github.com/appointy/jaal
graphql.engine.jaal.name = jaal
graphql.engine.jaal.technologies = Golang

graphql.engine.juniper.docsUrl = https\://github.com/graphql-rust/juniper
graphql.engine.juniper.name = Juniper
graphql.engine.juniper.technologies = Rust

graphql.engine.lacinia.docsUrl = https\://github.com/walmartlabs/lacinia
graphql.engine.lacinia.name = lacinia
graphql.engine.lacinia.technologies = Clojure

graphql.engine.lighthouse.docsUrl = https\://github.com/nuwave/lighthouse
graphql.engine.lighthouse.name = Lighthouse
graphql.engine.lighthouse.technologies = PHP

graphql.engine.mercurius.docsUrl = https\://github.com/mercurius-js/mercurius
graphql.engine.mercurius.name = mercurius
graphql.engine.mercurius.technologies = JavaScript, Node.js, および TypeScript

graphql.engine.morpheus.docsUrl = https\://github.com/morpheusgraphql/morpheus-graphql
graphql.engine.morpheus.name = morpheus-graphql
graphql.engine.morpheus.technologies = Haskell

graphql.engine.pg_graphql.docsUrl = https\://supabase.github.io/pg_graphql
graphql.engine.pg_graphql.name = pg_graphql
graphql.engine.pg_graphql.technologies = Rust

graphql.engine.sangria.docsUrl = https\://github.com/sangria-graphql/sangria
graphql.engine.sangria.name = Sangria
graphql.engine.sangria.technologies = Scala

graphql.engine.strawberry.docsUrl = https\://github.com/strawberry-graphql/strawberry
graphql.engine.strawberry.name = Strawberry
graphql.engine.strawberry.technologies = Python

graphql.engine.tailcall.docsUrl = https\://tailcall.run
graphql.engine.tailcall.name = tailcall
graphql.engine.tailcall.technologies = Rust

graphql.engine.tartiflette.docsUrl = https\://github.com/tartiflette/tartiflette
graphql.engine.tartiflette.name = tartiflette
graphql.engine.tartiflette.technologies = Python

graphql.engine.wpgraphql.docsUrl = https\://github.com/wp-graphql/wp-graphql
graphql.engine.wpgraphql.name = WPGraphQL WordPress Plugin
graphql.engine.wpgraphql.technologies = PHP

graphql.error.emptySchema = インポートされたスキーマが空でした。
graphql.error.filenotfound = ファイルが見つかりません\:\n{0}
graphql.error.import = スキーマをインポートできませんでした。\n{0}
graphql.error.importfile = ファイルからのインポート中にエラーが発生しました。
graphql.error.introspection = 指定されたエンドポイントのイントロスペクションに失敗しました。
graphql.error.invalidJson = インポートされたスキーマが有効なJSONではありませんでした。
graphql.error.invalidurl = 有効なURLを入力してください。\n{0}
graphql.error.nullData = インポートされたスキーマの"data"オブジェクトがnullでした。

graphql.fingerprinting.alert.desc = サーバーは"{0}"を使用しています。これは{1}用のGraphQL実装です。
graphql.fingerprinting.alert.name = GraphQLサーバー実装を特定

graphql.importDialog.chooseFileButton = ファイル選択
graphql.importDialog.importButton = インポート
graphql.importDialog.labelEndpoint = エンドポイントURL
graphql.importDialog.labelSchema = スキーマファイルまたはURL
graphql.importDialog.pasteAction = 貼り付け
graphql.importDialog.requiredFields = は必須フィールドを示します
graphql.importDialog.title = GraphQLスキーマのインポート

graphql.info.emptyendurl = GraphQL URLが指定されていません。

graphql.introspection.alert.desc = GraphQLエンドポイントでイントロスペクションが有効になっています。イントロスペクションにより、クライアントはスキーマを照会し、GraphQLエンドポイントでサポートされているフィールド、タイプ、入力などの詳細情報を取得できます。これは攻撃者にとって価値のある情報となり、より標的化されたクエリの作成を可能にする可能性があります。
graphql.introspection.alert.name = GraphQLエンドポイントがイントロスペクションをサポート
graphql.introspection.alert.ref = https\://spec.graphql.org/October2021/\#sec-Introspection
graphql.introspection.alert.soln = GraphQLエンドポイントでイントロスペクションを無効にしてください。

graphql.options.label.additionalQueryDepth = 追加クエリ深度\:
graphql.options.label.argsDepth = 最大引数深度\:
graphql.options.label.argsType = 引数の指定方法\:
graphql.options.label.lenientMaxQueryDepthEnabled = 寛容な最大クエリ深度
graphql.options.label.lenientMaxQueryDepthEnabled.tooltip = リーフタイプがないフィールドに追加の深度を許可して無効なクエリを防止します。
graphql.options.label.optionalArgsEnabled = オプション引数を指定
graphql.options.label.queryDepth = 最大クエリ深度\:
graphql.options.label.queryGenEnabled = クエリジェネレーターを有効化
graphql.options.label.requestMethod = リクエストメソッド\:
graphql.options.label.split = クエリの生成対象\:
graphql.options.panelName = GraphQL
graphql.options.queryGenConfigPanel.title = クエリジェネレーター設定
graphql.options.value.args.both = 両方
graphql.options.value.args.inline = インライン
graphql.options.value.args.variables = 変数を使用
graphql.options.value.request.postJson = POST（JSONボディ）
graphql.options.value.split.get = GET
graphql.options.value.split.leaf = 各リーフ（スカラーまたは列挙）
graphql.options.value.split.operation = 各オペレーション
graphql.options.value.split.postGraphql = POST（GraphQLボディ）
graphql.options.value.split.rootField = オペレーションの各フィールド

graphql.spider.desc = GraphQLスパイダー統合
graphql.spider.name = GraphQLスパイダー

graphql.techdetection.desc = GraphQL技術検出統合
graphql.techdetection.name = GraphQL技術検出

graphql.topmenu.import.importgraphql = GraphQLスキーマのインポート
graphql.topmenu.import.importgraphql.tooltip = GraphQLエンドポイントを指定し、オプションでGraphQLスキーマファイルをインポートします。
